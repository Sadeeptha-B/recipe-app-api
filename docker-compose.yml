version: "3" # Docker compose version
# Docker compose is a tool to run our docker image easily. It allows to easily manage the different services that make up the project. It contains the config of all the services.

# We have a service called app, and the build section of the configuration has the context: current directory. Port 8000 on host is mapped to port 8000 on our image. The volume allows us to get the updates made to the project to the docker image in real time: maps volume. The command is the command used to run the app in our docker container. sh -c means run the command with shell. (shell script) Techically this is not needed, but it helps to distinguish the docker-compose command and the rest
# 0.0.0.0:8000 means that it will run the django development server on all the IP addresses that run on the docker container

# Second service db. We will be setting up a postgres db instead of django's default sqlite db. For this we'll be pulling down the postgres alpine image. On a production server, you wouldn't expose the password and would instead set it up on your build system (Travis/Jenkins). Since we're running a local development server it doesn't matter much. The app service must have credentials to access the db: so env variables are set. The app service is set to depend on the db service. This means that the db service will start before app and the app service will be able to connect to the db.
services:
  app:
    build:
      context: .
    ports:
      - "8000:8000"
    volumes:
      - ./app:/app
    command: >
      sh -c "python manage.py runserver 0.0.0.0:8000"
    environment:
      - DB_HOST=db
      - DB_NAME=app
      - DB_USER=postgres
      - DB_PASS=supersecretpassword
    depends_on:
      - db

  db:
    image: postgres:10-alpine
    environment:
      - POSTGRES_DB=app
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=supersecretpassword


# To Build image with docker compose config (docker-compose build)
# To run a command: docker-compose run $service sh -c $command
#   This is for commands in general, that you want to run.
#
# Command to build a django project
#   docker-compose run app sh -c "django-admin.py startproject app ."
# This runs django-admin within our docker container. It is available since the django dependencies have been made available when building the image.
